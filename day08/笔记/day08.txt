1.运算符
  1.数学运算符号
  2.关系运算符(比较运算符)
    >  >=  <  <=  ==  !=
	===  恒等
	!==  不恒等
    注意：关系运算的结果为布尔类型
    1.数字与数字比较
	  var r = 10 > 5;  // r = true
	2.数字与字符串进行比较
	  首先会自动将字符串转换为数字再进行比较，如果转换成功，按照数字之间的比较进行
	  运算；如果转换失败，会变成数字与NaN之间的比较，结果永远都为False
	3.字符串之间的比较，进行每位字符的Unicode码的比较，当前位如果相同，就后移下一
	  位再次进行比较，当前位如果不同，直接出结果
	4. ==  ===  /  !=  !==
	  相等： 
	    == 用于判断两个变量的数据类型和值是否完全相等，不会进行数据类型转换，只要值
		相等，结果就为True
	  恒等：
	    === 用于判断两个变量的数据类型和值是否完全相等，不会进行数据类型转换，只有
		操作当数的数据类型保持一致，值相等，才为True
	  不等：
	    != 在两端值不相等的情况下，返回True
	  不恒等：
	    !== 两个操作数中，数据类型与值只要有一个不相等，就返回True，否则返回False
  3.逻辑运算符
    进行多项比较，并将结果组合为单一的布尔值
	&& ：逻辑与  等同于 python and，左右为表达式，还有两个表达式的结果都为真，逻辑
	     与的结果才为真
    ||：逻辑或 等同于 python or，只要有一个条件为真，结果就为真
	!：逻辑非，等同于 python not，对现有条件的结果进行取反操作
  4.位运算符
    程序中所有的数据在计算机中都是以二进制存储的，位运算，就是对二进制位进行操作
	1.按位与：&
	  将整数转换为二进制形式，每一位都进行与操作
	  注意：任何数字与1进行位与操作，结果为1时，表明操作数为奇数，结果为0，操作数为
	        偶数，所以可以用来判断数字奇偶
	2.按位或：  |
	3.按位异或： ^
	  两个数字的二进制进行比较，相同则为0，不同则为1
	  注意：^操作可以在不借助第三方变量的情况下，交换两个变量的值
  5.三目运算符
    三目运算符，有三个操作数
	  类似：
	    单目运算符(一元运算符) ++  --  !  typeof，只有一个操作数的运算符
		双目运算符(二元运算符) +  =  *  /  %  &&  ||  >  ... 有两个操作者数的运算符
	  语法：
	    条件表达式 ? 表达式1 : 表达式2;
		先判断条件表达式的结果，为真，执行表达式1，为假，执行表达式2
	练习1：
	  成绩判定
	    接收用户输入的分数 score
		score < 60 不及格
		60 <= score < 80 及格
		80 <= score < 90 良好
		score >= 90 优秀
	练习2：
	  BMI 身体指数计算
	  要求从弹框接收用户输入的身高
	  要求从弹框接收用户输入的体重
	  bmi = 体重 / 身高 * 身高;
	  bmi < 18.5  偏瘦
	  bmi > 23.9  偏胖
	  介于二者之间，属于健康
2.流程控制语句
  控制当前代码的执行顺序
  流程语句结构：
    1.顺序结构
	2.分支结构(选择结构)
	3.循环结构
  1.顺序结构
    按照代码书写顺序，从上到下执行
  2.分支(选择)结构
    1.作用
	  根据条件选择某一段代码执行
	2. if 结构
	  1. if 语句
	    语法：
		  if(条件){
			  待执行的语句
			  只有条件为真，才执行{}里的语句
		  }
		注意：
		  1. if ()后面的{}可以省略，省略之后，只控制该结构下的第一条语句
		  2.条件尽可能是布尔类型的
		  3.任何非0值都为真，0位假，以下情况，条件的结构都为假
		    if(0){}
			if(0.0){}
			if(""){}
			if(NaN){}
			if(undefined){}
			if(null){}
	  2. if - else 结构
	    语法：
		  if(条件){
			  条件为真时要执行的语句
		  }else{
			  条件为假时要执行的语句
		  }
	  3.多重分支结构
	    if(条件){
			条件为真时要执行的语句
		}else if(条件2){
			条件2为真时要执行的语句
		}
      练习：
	    1.判断成绩等级
		2.日期计算器
		  用户输入
		  年，月，日，计算当日是该年的第几天
		  例如：
		    用户输入 2018 - 1 - 15
			输出 当天是2018年的第15天
			用户输入 2018 - 2 - 15
			输出 当天是2018年的第31 + 15天
			注意：
			  如果是闰年，2月为29天，总天数+1
			提示：
			  1.判断的是月份
			  2.当年是闰年，并且用户输入的月份 >2,总天数+1
    3. switch 语句
	  在进行值判断时用的比较多
	  语法：
	    switch(变量){
			case 值1:
			    如果变量的值与case给出的值相等，就会执行：后面的代码段
				代码块;
				break;  跳出switch语句，不再向后进行匹配，可以省略
			case 值2:
			    代码块;
				break;
			case 值3:
			    代码块3;
				break;
			...
			default:
			    代码块;
				所有case都匹配失败之后执行的默认语句
		}
	  注意：
	    1.变量与case值的匹配，是用===恒等判断的，只有数据类型与值都相等才能匹配成功
		2.break表示跳出switch判断，后面的判断语句不执行
		3.default关键字用于在表达式不匹配前面给出的任何一种情形时，最终执行的操作
	  练习：
	    1.每周食谱
		  弹框输入1-7 表示星期几
		  星期一：今天是星期一，吃红烧肉
		  ...
		  星期天：今天是星期天，吃红烧鱼
		2.改写日期计算器
  3.循环结构
    1.作用
	  重复执行某段代码
	2.循环三要素
	  循环变量
	  循环条件
	  循环体
	3.while 循环
	  1.语法：
	    while(循环条件){
			循环体
		}
		例如：
		  重复输出100次“编程是我快乐”
		  1.定义循环变量
		  var i = 1;  表示循环次数
		  while(i <= 100){
			  console.log("编程是我快乐");
			  更新循环变量
			  i++;
		  }
	  2.循环语句的执行流程
	    1.定义循环变量
		2.判断循环条件
		3.条件成立，执行循环体
		4.更新循环变量
		5.重复2-3-4
		4.直到循环条件不成立，结束循环
	  3.练习：
	    1.打印1-100之间所以数字
		2.打印1-100之间所有数字的和
		3.打印1-100之间所有3的倍数
	  4.do-while循环
	    1.语法：
		  do{
			  循环体
		  }while(循环条件);
		2.执行流程
		  1.定义循环变量
		  2.执行循环体
		  3.更新循环变量
		  4.判断循环条件，条件成立重复2-3-4，条件不成立，结束循环
		3.while 与 do...while区别：
		  while循环先判断循环条件，为真菜执行循环体
		  do-while循环不管条件是否成立，先执行循环体，后判断循环条件。即使循环条件不成立，
		  也会执行一遍循环体
		练习：
		  1.循环接收用户输入，并在控制台输出，知道用户输入exit，结束循环
		  2.改版日期计算器



















	